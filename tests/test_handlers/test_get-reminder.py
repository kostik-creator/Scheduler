import pytest
from datetime import datetime, timedelta
from unittest.mock import AsyncMock, patch

from bot.handlers.user_handlers import get_reminder_text

@pytest.mark.asyncio
async def test_get_reminder_text() -> None:
    """–¢–µ—Å—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ Redis.
    """
    message = AsyncMock()
    message.from_user.id = 12345
    
    redis_pool = AsyncMock()
    future_date = datetime.now() + timedelta(minutes=5)
    text_remind = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
    date_str = future_date.strftime("%Y-%m-%d")
    time_str = future_date.strftime("%H:%M:%S")
    
    with patch('bot.handlers.user_handlers.logger.log') as mock_log, \
         patch('bot.handlers.user_handlers.analyze_reminder_handlers', new_callable=AsyncMock) as mock_analyze_reminder_handlers, \
         patch('bot.handlers.user_handlers.set_info_remind', new_callable=AsyncMock) as mock_set_info_remind, \
         patch('bot.handlers.user_handlers.datetime') as mock_datetime:
        
        mock_analyze_reminder_handlers.return_value = (text_remind, future_date, date_str, time_str)
        mock_datetime.now.return_value = datetime.now()
        
        await get_reminder_text(message, redis_pool)
        
        message.answer.assert_any_call("–ò–¥—ë—Ç –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è...")
        message.answer.assert_any_call(f'üìù –í–∞—à–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: "{text_remind}"\nüóì –î–∞—Ç–∞: {date_str} \n‚è∞ –í—Ä–µ–º—è: {time_str}')
        redis_pool.enqueue_job.assert_called_once_with("send_message", _defer_until=future_date, chat_id=message.from_user.id, text=f"–ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è:\n{text_remind}")
        mock_set_info_remind.assert_called_once_with(message=message)
        
        mock_log.assert_any_call('info', f'–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}')
        mock_log.assert_any_call('info', f'–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –∞–Ω–∞–ª–∏–∑–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}')
        mock_log.assert_any_call('info', f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}, —Ç–µ–∫—Å—Ç: "{text_remind}", –≤—Ä–µ–º—è: {future_date}')


@pytest.mark.asyncio
async def test_get_reminder_text_min_time_error() -> None:
    """–¢–µ—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
    
    """
    message = AsyncMock()
    message.from_user.id = 12345
    
    redis_pool = AsyncMock()
    past_date = datetime.now() - timedelta(minutes=5)
    text_remind = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
    date_str = past_date.strftime("%Y-%m-%d")
    time_str = past_date.strftime("%H:%M:%S")
    
    with patch('bot.handlers.user_handlers.logger.log') as mock_log, \
         patch('bot.handlers.user_handlers.analyze_reminder_handlers', new_callable=AsyncMock) as mock_analyze_reminder_handlers, \
         patch('bot.handlers.user_handlers.datetime') as mock_datetime:
        
        mock_analyze_reminder_handlers.return_value = (text_remind, past_date, date_str, time_str)
        mock_datetime.now.return_value = datetime.now()
        
        await get_reminder_text(message, redis_pool)
        
        message.answer.assert_any_call("–ò–¥—ë—Ç –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è...")
        message.answer.assert_any_call("‚ö† –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è - 1 –º–∏–Ω—É—Ç–∞")
        
        mock_log.assert_any_call('info', f'–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}')
        mock_log.assert_any_call('info', f'–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –∞–Ω–∞–ª–∏–∑–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}')
        mock_log.assert_any_call('error', f'–ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}')