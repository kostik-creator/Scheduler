import pytest
from unittest.mock import AsyncMock, patch

from bot.handlers.user_handlers import list_reminder

@pytest.mark.asyncio
async def test_list_reminder() -> None:
    """–¢–µ—Å—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    –∏ –ª–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    message = AsyncMock()
    message.from_user.id = 12345

    reminders = [
        {'text': '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ 1', 'datetime': '2024-10-19 15:00:00'},
        {'text': '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ 2', 'datetime': '2024-10-20 16:00:00'}
    ]

    with patch('bot.handlers.user_handlers.logger.log') as mock_log, \
         patch('bot.handlers.user_handlers.get_all_reminders', new_callable=AsyncMock) as mock_get_all_reminders:

        mock_get_all_reminders.return_value = reminders

        await list_reminder(message)

        expected_message = """ü•∑ –í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π üìÉ\n
1. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ 1", –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: 2024-10-19 15:00:00
2. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ 2", –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: 2024-10-20 16:00:00"""

        message.answer.assert_called_with(expected_message)
        mock_log.assert_any_call('info', f'–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}')
        mock_log.assert_any_call('info', f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ 1: "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ 1", –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: 2024-10-19 15:00:00 –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}')
        mock_log.assert_any_call('info', f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ 2: "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ 2", –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: 2024-10-20 16:00:00 –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}')


@pytest.mark.asyncio
async def test_list_reminder_empty() -> None:
    """–¢–µ—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—É—Å—Ç.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–º —Å–ø–∏—Å–∫–µ
    –∏ –ª–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ.
    """
    message = AsyncMock()
    message.from_user.id = 12345

    with patch('bot.handlers.user_handlers.logger.log') as mock_log, \
         patch('bot.handlers.user_handlers.get_all_reminders', new_callable=AsyncMock) as mock_get_all_reminders:

        mock_get_all_reminders.return_value = []

        await list_reminder(message)

        message.answer.assert_called_with("–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—É—Å—Ç")
        mock_log.assert_any_call('info', f'–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}')
        mock_log.assert_any_call('info', f'–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—É—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}')
        mock_log.assert_any_call('error', f'–û—à–∏–±–∫–∞: –°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—É—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}')