import pytest
from unittest.mock import AsyncMock, patch

from bot.handlers.user_handlers import cmd_start
from bot.keyboards.user_keyboards import get_main_kb

@pytest.mark.asyncio
async def test_start_handler() -> None:
    """–¢–µ—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é 
    –∏ –ª–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è.
    """
    message = AsyncMock()

    with patch('bot.handlers.user_handlers.logger.log') as mock_log:
        await cmd_start(message)

        start_text = (
            "–ü—Ä–∏–≤–µ—Ç! –Ø NudgeNinja, –í–∞—à –ª–∏—á–Ω—ã–π –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞. " 
            "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –í–∞–º –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–º –∏ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞–∂–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è.\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, —á—Ç–æ –∏ –∫–æ–≥–¥–∞ –≤–∞–º –Ω—É–∂–Ω–æ –≤—Å–ø–æ–º–Ω–∏—Ç—å, –∏ —è —É—Å—Ç–∞–Ω–æ–≤–ª—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –≤–∞—Å ‚è∞.\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞–∑–∞—Ç—å: ‚Äú–ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ –æ –≤—Å—Ç—Ä–µ—á–µ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00‚Äù, –∏ —è —É—Å—Ç–∞–Ω–æ–≤–ª—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ "
            "—É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É ü•∑.\n\n"
            "‚ö† <b>–ï—Å–ª–∏ –≤—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –¥–∞—Ç—É, —è –æ—Ç–ø—Ä–∞–≤–ª—é –í–∞–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è.</b>"
        )

        message.answer.assert_called_with(start_text, parse_mode="html", reply_markup=get_main_kb())
        mock_log.assert_any_call('info', f'–ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {message.from_user.id}')
        mock_log.assert_any_call('info', f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {message.from_user.id}')