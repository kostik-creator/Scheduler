import re
import asyncio
from datetime import datetime
from functools import partial

from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Text
from arq import ArqRedis

from bot.db.db_func import *
from bot.keyboards.user_keyboards import get_main_kb
from bot.logging.logger import logger
from bot.other_func.reminder_analysis import analyze_reminder_handlers

async def cmd_start(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        message (types.Message): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    logger.log('info', f'–ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {message.from_user.id}')

    await get_user(message=message)

    start_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø NudgeNinja, –í–∞—à –ª–∏—á–Ω—ã–π –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞. "
        "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –í–∞–º –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–º –∏ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞–∂–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, —á—Ç–æ –∏ –∫–æ–≥–¥–∞ –≤–∞–º –Ω—É–∂–Ω–æ –≤—Å–ø–æ–º–Ω–∏—Ç—å, –∏ —è —É—Å—Ç–∞–Ω–æ–≤–ª—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –≤–∞—Å ‚è∞.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞–∑–∞—Ç—å: ‚Äú–ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ –æ –≤—Å—Ç—Ä–µ—á–µ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00‚Äù, –∏ —è —É—Å—Ç–∞–Ω–æ–≤–ª—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ "
        "—É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É ü•∑.\n\n"
        "‚ö† <b>–ï—Å–ª–∏ –≤—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –¥–∞—Ç—É, —è –æ—Ç–ø—Ä–∞–≤–ª—é –í–∞–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è.</b>"
    )

    await message.answer(start_text, parse_mode="html", reply_markup=get_main_kb())
    logger.log('info', f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {message.from_user.id}')


async def list_reminder(message: types.Message) -> None:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        message (types.Message): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    logger.log('info', f'–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}')

    try:
        list_message = "ü•∑ –í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π üìÉ\n"
        reminders = await get_all_reminders(message)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        if not reminders:
            logger.log('info', f'–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—É—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}')
            raise TypeError("–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—É—Å—Ç")

        for i, reminder in enumerate(reminders, 1):
            list_message += f'\n{i}. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: "{reminder["text"]}", –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {reminder["datetime"]}'
            logger.log('info', f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {i}: "{reminder["text"]}", –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {reminder["datetime"]} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}')

        await message.answer(list_message)

    except TypeError:
        await message.answer("–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—É—Å—Ç")
        logger.log('error', f'–û—à–∏–±–∫–∞: –°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—É—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}')
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        logger.log('error', f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')


async def get_reminder_text(message: types.Message, redis_pool: ArqRedis) -> None:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        message (types.Message): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        redis_pool (ArqRedis): –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π Redis –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á.
    """
    logger.log('info', f'–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}')

    try:
        await message.answer("–ò–¥—ë—Ç –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è...")
        logger.log('info', f'–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –∞–Ω–∞–ª–∏–∑–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}')

        text_remind, from_date, date_str, time_str = await analyze_reminder_handlers(message=message)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if from_date < datetime.now():
            ex_message = "‚ö† –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è - 1 –º–∏–Ω—É—Ç–∞"
            await message.answer(ex_message)
            logger.log('error', f'–ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}')
        else:
            await message.answer(f'üìù –í–∞—à–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: "{text_remind}"\nüóì –î–∞—Ç–∞: {date_str} \n‚è∞ –í—Ä–µ–º—è: {time_str}')
            await redis_pool.enqueue_job("send_message", _defer_until=from_date, chat_id=message.from_user.id, 
                                           text=f"–ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è:\n{text_remind}")
            await set_info_remind(message=message)
            logger.log('info', f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}, —Ç–µ–∫—Å—Ç: "{text_remind}", –≤—Ä–µ–º—è: {from_date}')
            asyncio.create_task(delete_expired_rows())

    except (IndexError, ValueError) as e:
        await message.reply("‚ö† –í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –µ—â–µ —Ä–∞–∑, –Ω–æ, —É–∫–∞–∑–∞–≤ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è ü•∑\n‚ö† –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è - 1 –º–∏–Ω—É—Ç–∞ ü•∑")
        logger.log('error', f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}. –û—à–∏–±–∫–∞: {e}')
    except Exception as e:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
        logger.log('error', f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}. –û—à–∏–±–∫–∞: {e}')


async def handle_delete_reminder(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        message (types.Message): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    logger.log('info', f'–ö–æ–º–∞–Ω–¥–∞ /delete_reminder –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {message.from_user.id}')

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        reminder_number = int(message.text.split()[1])
        reminders = await get_all_reminders(message)

        if reminder_number < 1 or reminder_number > len(reminders):
            raise ValueError("–ù–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")

        reminder_id = reminders[reminder_number - 1]['id']
        result = await delete_reminder(message, reminder_id)
        await message.reply(result)
        logger.log('info', f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å ID {reminder_id} —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}')
    except (IndexError, ValueError) as e:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
        logger.log('error', f'–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}. –û—à–∏–±–∫–∞: {e}')
    except Exception as e:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
        logger.log('error', f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}. –û—à–∏–±–∫–∞: {e}')


async def handle_edit_reminder(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        message (types.Message): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    logger.log('info', f'–ö–æ–º–∞–Ω–¥–∞ /edit_reminder –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {message.from_user.id}')

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –≤–≤–æ–¥–∞
        match = re.match(r'/edit_reminder (\d+) (.+) (\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})', message.text)
        if not match:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.")

        reminder_number = int(match.group(1))
        new_text = match.group(2)
        new_date_str = match.group(3)

        new_date = datetime.strptime(new_date_str, "%Y-%m-%d %H:%M:%S")

        reminders = await get_all_reminders(message)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if reminder_number < 1 or reminder_number > len(reminders):
            raise ValueError("–ù–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")

        reminder_id = reminders[reminder_number - 1]['id']
        result = await update_reminder(reminder_id, new_text, new_date, message.from_user.id)
        await message.reply(result)
        logger.log('info', f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å ID {reminder_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}')

    except ValueError as e:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏ –¥–∞—Ç—É.")
        logger.log('error', f'–û—à–∏–±–∫–∞: {e} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}')

    except Exception as e:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
        logger.log('error', f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}. –û—à–∏–±–∫–∞: {e}')


def register_user_handlers(dp: Dispatcher, redis_pool: ArqRedis) -> None:
    """–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        dp (Dispatcher): –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.
        redis_pool (ArqRedis): –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π Redis –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á.
    """
    dp.register_message_handler(cmd_start, commands=['start'])
    dp.register_message_handler(handle_delete_reminder, commands=['delete_reminder'])
    dp.register_message_handler(handle_edit_reminder, commands=['edit_reminder'])
    dp.register_message_handler(list_reminder, Text(equals="–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"))
    dp.register_message_handler(partial(get_reminder_text, redis_pool=redis_pool))  # type: ignore